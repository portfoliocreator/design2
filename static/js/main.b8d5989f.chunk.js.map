{"version":3,"sources":["portfolio/landing.jsx","portfolio/about.jsx","portfolio/cards/paper.jsx","portfolio/education.jsx","portfolio/cards/flat.jsx","portfolio/work.jsx","portfolio/cards/expand.jsx","portfolio/volunteer.jsx","portfolio/cards/mini/award.jsx","portfolio/cards/mini/language.jsx","portfolio/cards/mini/publication.jsx","portfolio/cards/mini/skills.jsx","portfolio/cards/dialogPublication.jsx","portfolio/cards/dialogAward.jsx","portfolio/extra.jsx","portfolio/contact.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Landing","props","name","label","img","initScroll","className","src","alt","onClick","onKeyPress","role","tabIndex","About","about","summary","PaperCard","company","position","children","grade","startDate","endDate","degree","Paper","Education","education","map","educationPlace","institution","area","gpa","startdate","enddate","qualification","details","FlatCard","website","href","target","rel","Work","work","workPlace","ExpansionCard","organisation","handlePanelChange","expanded","id","ExpansionPanel","onChange","ExpansionPanelSummary","expandIcon","aria-controls","Typography","ExpansionPanelDetails","Volunteer","state","bind","panel","this","setState","volunteer","volunteerPlace","index","React","Component","MiniCard","title","items","handleDialogOpen","Card","CardContent","component","variant","style","textTransform","item","Chip","language","Transition","forwardRef","ref","Slide","direction","AlertDialogSlide","open","handleDialogClose","date","publisher","Dialog","TransitionComponent","fullWidth","maxWidth","keepMounted","onClose","aria-labelledby","aria-describedby","padding","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","awarder","overflowWrap","Extra","awards","publications","languages","skills","openPublishDialog","openAwardDialog","userAwards","userPublication","userLanguages","userSkills","text","type","chip","releaseDate","AwardDisp","PublicDisp","SkillDisp","length","Contact","email","phone","location","addressline1","addressline2","city","country","pincode","App","profile","appData","user","imgUrl","scroll","scrollTo","window","innerHeight","top","number","Boolean","hostname","match","fetch","then","r","json","data","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8d5989f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Landing = (props) => {\n    const { name, label, img, initScroll } = props;\n    return (\n        <div className=\"portfolioPage1\">\n            <div className=\"portfolioPage1Details\">\n                <img\n                    className=\"portfolioUserImage\"\n                    src={img}\n                    alt=\"user profile representation\"\n                />\n                <div className=\"portfolioUserDetails\">\n                    <span className=\"portfolioUserName\">{name}</span>{' '}\n                    <span className=\"portfolioUserLabel\">| {label}</span>\n                    <div className=\"miniLine\" />\n                </div>\n            </div>\n            <div className=\"portfolioPage1SocialHolder\">\n                <div\n                    className=\"portfolioBtn\"\n                    onClick={initScroll}\n                    onKeyPress={initScroll}\n                    role=\"button\"\n                    tabIndex={0}\n                >\n                    Learn More\n                </div>\n            </div>\n        </div>\n    );\n};\n\nLanding.propTypes = {\n    name: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    img: PropTypes.string.isRequired,\n    initScroll: PropTypes.func.isRequired,\n};\n\nexport default Landing;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst About = (props) => {\n    const { summary } = props;\n    const about = summary.summary;\n    return (\n        <div className=\"portfolioPage aboutPage\">\n            <div className=\"portfolioPageSplit rightAbout\">\n                <div className=\"portfolioUserSummary\">\n                    <div className=\"miniLine\" />\n                    {about}\n                    <div className=\"miniLine\" />\n                </div>\n            </div>\n            <div className=\"portfolioPageSplit leftAbout\">About me</div>\n        </div>\n    );\n};\n\nAbout.propTypes = {\n    summary: PropTypes.string.isRequired,\n};\n\nexport default About;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Paper from '@material-ui/core/Paper';\n\nconst PaperCard = (props) => {\n    const {\n        company,\n        position,\n        children,\n        grade,\n        startDate,\n        endDate,\n        degree,\n    } = props;\n    return (\n        <Paper className=\"portfolioCard portfolioWorkCard\">\n            <div className=\"portfolioCardTitle\">\n                <span className=\"portfolioCardTitleMain\">{company}</span>{' '}\n                <span className=\"portfolioCardTitleSub\">| {position}</span>\n                <div className=\"portfolioFlatSubTitle\">{degree}</div>\n            </div>\n            <div className=\"miniLine miniCardLine\" />\n            <div className=\"portfolioCardContent\">{children}</div>\n            <div className=\"miniLine miniCardLine\" />\n            <div className=\"portfolioCardWebsite\">\n                <span>Grade |</span> {grade}\n            </div>\n            <div className=\"portfolioCardDateContainer\">\n                {startDate} - {endDate}\n            </div>\n        </Paper>\n    );\n};\n\nPaperCard.propTypes = {\n    company: PropTypes.string.isRequired,\n    position: PropTypes.string.isRequired,\n    children: PropTypes.string.isRequired,\n    grade: PropTypes.number.isRequired,\n    degree: PropTypes.string.isRequired,\n    startDate: PropTypes.string.isRequired,\n    endDate: PropTypes.string.isRequired,\n};\n\nexport default PaperCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PaperCard from './cards/paper';\n\nconst Education = (props) => {\n    const { education } = props;\n\n    return (\n        <div className=\"portfolioPage portfolioEducationPage\">\n            <div className=\"portfolioPageTitle\">Education</div>\n            <div className=\"miniLine pageMiniLine\" />\n            <div className=\"portfolioFlatContainer\">\n                {education.map((educationPlace) => (\n                    <PaperCard\n                        company={educationPlace.institution}\n                        position={educationPlace.area}\n                        grade={educationPlace.gpa}\n                        startDate={educationPlace.startdate}\n                        endDate={educationPlace.enddate}\n                        degree={educationPlace.qualification}\n                    >\n                        {educationPlace.details}\n                    </PaperCard>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nEducation.propTypes = {\n    education: PropTypes.objectOf(PropTypes.object).isRequired,\n};\n\nexport default Education;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FlatCard = (props) => {\n    const {\n        institution,\n        degree,\n        area,\n        children,\n        website,\n        startDate,\n        endDate,\n    } = props;\n    return (\n        <div className=\"portfolioFlat\">\n            <div className=\"portfolioCardTitle\">\n                <span className=\"portfolioCardTitleMain\">{institution} |</span>{' '}\n                <span className=\"portfolioCardTitleSub\">{degree}</span>\n                <div className=\"portfolioFlatSubTitle\">{area}</div>\n            </div>\n            <div className=\"portfolioFlatContent\">\n                <div className=\"portfolioFlatContentSummary\">{children}</div>\n                <div className=\"portfolioFlatSubTitle portfolioCardWebsite\">\n                    Website:{' '}\n                    <a href={website} target=\"_blank\" rel=\"noopener noreferrer\">\n                        Link to page\n                    </a>\n                </div>\n            </div>\n            <div className=\"portfolioCardDateContainer\">\n                {startDate} - {endDate}\n            </div>\n        </div>\n    );\n};\n\nFlatCard.propTypes = {\n    institution: PropTypes.string.isRequired,\n    degree: PropTypes.string.isRequired,\n    area: PropTypes.string.isRequired,\n    children: PropTypes.string.isRequired,\n    website: PropTypes.string.isRequired,\n    startDate: PropTypes.string.isRequired,\n    endDate: PropTypes.string.isRequired,\n};\n\nexport default FlatCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FlatCard from './cards/flat';\n\nconst Work = (props) => {\n    const { work } = props;\n\n    return (\n        <div className=\"portfolioPage workPage\">\n            <div className=\"portfolioPageTitle\">Work</div>\n            <div className=\"portfolioCardContainer portfolioWorkCardContainer\">\n                {work.map((workPlace) => (\n                    <FlatCard\n                        institution={workPlace.company}\n                        degree={workPlace.position}\n                        website={workPlace.website}\n                        startDate={workPlace.startdate}\n                        endDate={workPlace.enddate}\n                    >\n                        {workPlace.summary}\n                    </FlatCard>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nWork.propTypes = {\n    work: PropTypes.objectOf(PropTypes.object).isRequired,\n};\n\nexport default Work;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\n\nconst ExpansionCard = (props) => {\n    const {\n        organisation,\n        position,\n        children,\n        website,\n        startDate,\n        endDate,\n        handlePanelChange,\n        expanded,\n        id,\n    } = props;\n\n    return (\n        <ExpansionPanel\n            expanded={expanded === `panel${id}`}\n            onChange={() => handlePanelChange(`panel${id}`)}\n            className=\"portfolioVolunteerExpansionPanel\"\n        >\n            <ExpansionPanelSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls=\"panel1bh-content\"\n                id=\"panel1bh-header\"\n            >\n                <div className=\"portfolioExpansionPanelTitle\">\n                    {organisation}\n                </div>\n                <Typography className=\"portfolioExpansionPanelSubTitle\">\n                    {position}\n                </Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n                <div className=\"portfolioExpansionPanelDetails\">\n                    <Typography>{children}</Typography>\n                    <div className=\"miniLine miniCardLine\" />\n                    <div className=\"portfolioExpansionPanelWebsite\">\n                        <span>Website |</span>{' '}\n                        <a\n                            href={website}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Link to page\n                        </a>\n                    </div>\n                    <div className=\"portfolioCardDateContainer\">\n                        {startDate} | {endDate}\n                    </div>\n                </div>\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n    );\n};\n\nExpansionCard.propTypes = {\n    organisation: PropTypes.string.isRequired,\n    position: PropTypes.string.isRequired,\n    children: PropTypes.string.isRequired,\n    website: PropTypes.string.isRequired,\n    startDate: PropTypes.string.isRequired,\n    endDate: PropTypes.string.isRequired,\n    handlePanelChange: PropTypes.func.isRequired,\n    expanded: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n};\n\nexport default ExpansionCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ExpansionCard from './cards/expand';\n\nclass Volunteer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: false,\n        };\n        this.handlePanelChange = this.handlePanelChange.bind(this);\n    }\n\n    handlePanelChange(panel) {\n        const { expanded } = this.state;\n        if (expanded === panel) {\n            this.setState({\n                expanded: false,\n            });\n        } else {\n            this.setState({\n                expanded: panel,\n            });\n        }\n    }\n\n    render() {\n        const { expanded } = this.state;\n        const { volunteer } = this.props;\n        return (\n            <div className=\"portfolioPage volunteerPage\">\n                <div className=\"portfolioPageSplit rightVolunteer\">\n                    Volunteering | POR\n                </div>\n                <div className=\"portfolioPageSplit leftVolunteer\">\n                    {volunteer.map((volunteerPlace, index) => (\n                        <ExpansionCard\n                            organisation={volunteerPlace.organisation}\n                            position={volunteerPlace.position}\n                            website={volunteerPlace.website}\n                            startDate={volunteerPlace.startdate}\n                            endDate={volunteerPlace.enddate}\n                            handlePanelChange={this.handlePanelChange}\n                            expanded={expanded}\n                            id={index}\n                        >\n                            {volunteerPlace.summary}\n                        </ExpansionCard>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nVolunteer.propTypes = {\n    volunteer: PropTypes.objectOf(PropTypes.object).isRequired,\n};\n\nexport default Volunteer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Chip from '@material-ui/core/Chip';\nimport Typography from '@material-ui/core/Typography';\n\nconst MiniCard = (props) => {\n    const { title, items, handleDialogOpen } = props;\n\n    return (\n        <Card className=\"portfolioExtraCard\">\n            <div className=\"portfolioExtraDetails\">\n                <CardContent className=\"portfolioExtraContent\">\n                    <Typography\n                        component=\"h5\"\n                        variant=\"h5\"\n                        style={{ textTransform: 'capitalize' }}\n                    >\n                        {title}\n                    </Typography>\n                    {items.map((item) => (\n                        <Chip\n                            className=\"chip\"\n                            variant=\"outlined\"\n                            label={item.title}\n                            onClick={() => handleDialogOpen(title, item)}\n                        />\n                    ))}\n                </CardContent>\n            </div>\n            <div className=\"portfolioExtraImage miniAwardImage\" />\n        </Card>\n    );\n};\n\nMiniCard.propTypes = {\n    title: PropTypes.string.isRequired,\n    items: PropTypes.arrayOf.isRequired,\n    handleDialogOpen: PropTypes.func.isRequired,\n};\n\nexport default MiniCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Chip from '@material-ui/core/Chip';\nimport Typography from '@material-ui/core/Typography';\n\nconst MiniCard = (props) => {\n    const { title, items } = props;\n\n    return (\n        <Card className=\"portfolioExtraCard\">\n            <div className=\"portfolioExtraDetails\">\n                <CardContent className=\"portfolioExtraContent\">\n                    <Typography\n                        component=\"h5\"\n                        variant=\"h5\"\n                        style={{ textTransform: 'capitalize' }}\n                    >\n                        {title}\n                    </Typography>\n                    {items.map((item) => (\n                        <Chip\n                            className=\"chip\"\n                            variant=\"outlined\"\n                            label={item.language}\n                        />\n                    ))}\n                </CardContent>\n            </div>\n            <div className=\"portfolioExtraImage miniLanguageImage\" />\n        </Card>\n    );\n};\n\nMiniCard.propTypes = {\n    title: PropTypes.string.isRequired,\n    items: PropTypes.arrayOf.isRequired,\n};\n\nexport default MiniCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Chip from '@material-ui/core/Chip';\nimport Typography from '@material-ui/core/Typography';\n\nconst MiniCard = (props) => {\n    const { title, items, handleDialogOpen } = props;\n\n    return (\n        <Card className=\"portfolioExtraCard\">\n            <div className=\"portfolioExtraDetails\">\n                <CardContent className=\"portfolioExtraContent\">\n                    <Typography\n                        component=\"h5\"\n                        variant=\"h5\"\n                        style={{ textTransform: 'capitalize' }}\n                    >\n                        {title}\n                    </Typography>\n                    {items.map((item) => (\n                        <Chip\n                            className=\"chip\"\n                            variant=\"outlined\"\n                            label={item.name}\n                            onClick={() => handleDialogOpen(title, item)}\n                        />\n                    ))}\n                </CardContent>\n            </div>\n            <div className=\"portfolioExtraImage miniPublicationImage\" />\n        </Card>\n    );\n};\n\nMiniCard.propTypes = {\n    title: PropTypes.string.isRequired,\n    items: PropTypes.arrayOf.isRequired,\n    handleDialogOpen: PropTypes.func.isRequired,\n};\n\nexport default MiniCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Chip from '@material-ui/core/Chip';\nimport Typography from '@material-ui/core/Typography';\n\nconst MiniCard = (props) => {\n    const { title, items } = props;\n\n    return (\n        <Card className=\"portfolioExtraCard\">\n            <div className=\"portfolioExtraDetails\">\n                <CardContent className=\"portfolioExtraContent\">\n                    <Typography\n                        component=\"h5\"\n                        variant=\"h5\"\n                        style={{ textTransform: 'capitalize' }}\n                    >\n                        {title}\n                    </Typography>\n                    {items.map((item) => (\n                        <Chip\n                            className=\"chip\"\n                            variant=\"outlined\"\n                            label={item.name}\n                        />\n                    ))}\n                </CardContent>\n            </div>\n            <div className=\"portfolioExtraImage miniSkillImage\" />\n        </Card>\n    );\n};\n\nMiniCard.propTypes = {\n    title: PropTypes.string.isRequired,\n    items: PropTypes.arrayOf.isRequired,\n};\n\nexport default MiniCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n\nconst Transition = React.forwardRef(function TransitionComponent(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function AlertDialogSlide(props) {\n    const {\n        open,\n        handleDialogClose,\n        title,\n        children,\n        date,\n        publisher,\n        website,\n    } = props;\n    return (\n        <div>\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                fullWidth\n                maxWidth=\"sm\"\n                keepMounted\n                onClose={() => handleDialogClose({ title })}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n                style={{ padding: '50px' }}\n            >\n                <DialogTitle id=\"alert-dialog-slide-title\">{title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-slide-description\">\n                        <div className=\"portfolioPublishCompany\">\n                            <span>Published By -</span> {publisher}\n                        </div>\n                        <div className=\"portfolioPublishDate\">\n                            <span>Released On -</span> {date}\n                        </div>\n                        <br />\n                        <div className=\"portfolioPublishSummary\">\n                            {children}\n                        </div>\n                        <br />\n                        <div className=\"portfolioPublishWebsite\">\n                            <span>Website -</span>{' '}\n                            <a href={website}>Link to page</a>\n                        </div>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => handleDialogClose({ title })}>\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nAlertDialogSlide.propTypes = {\n    open: PropTypes.bool.isRequired,\n    handleDialogClose: PropTypes.func.isRequired,\n    title: PropTypes.string.isRequired,\n    children: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    publisher: PropTypes.string.isRequired,\n    website: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n\nconst Transition = React.forwardRef(function TransitionComponent(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function AlertDialogSlide(props) {\n    const { open, handleDialogClose, title, children, date, awarder } = props;\n    return (\n        <div>\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                fullWidth\n                maxWidth=\"sm\"\n                keepMounted\n                onClose={() => handleDialogClose({ title })}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n                style={{ padding: '50px' }}\n            >\n                <DialogTitle id=\"alert-dialog-slide-title\">{title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText\n                        id=\"alert-dialog-slide-description\"\n                        style={{ overflowWrap: 'normal' }}\n                    >\n                        <div className=\"portfolioAwardCompany\">\n                            <span>Awarded By -</span> {awarder}\n                        </div>\n                        <div className=\"portfolioAwardDate\">\n                            <span>On -</span> {date}\n                        </div>\n                        <br />\n                        <div className=\"portfolioAwardSummary\">{children}</div>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => handleDialogClose({ title })}>\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nAlertDialogSlide.propTypes = {\n    open: PropTypes.bool.isRequired,\n    handleDialogClose: PropTypes.func.isRequired,\n    title: PropTypes.string.isRequired,\n    children: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    awarder: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AwardCard from './cards/mini/award';\nimport LanguageCard from './cards/mini/language';\nimport PublicationCard from './cards/mini/publication';\nimport SkillCard from './cards/mini/skills';\nimport DialogPublication from './cards/dialogPublication';\nimport DialogAward from './cards/dialogAward';\n\nclass Extra extends React.Component {\n    constructor(props) {\n        super(props);\n        const { awards, publications, languages, skills } = this.props;\n        this.state = {\n            openPublishDialog: false,\n            openAwardDialog: false,\n            userAwards: awards,\n            userPublication: publications,\n            userLanguages: languages,\n            userSkills: skills,\n            title: '',\n            company: '',\n            date: '',\n            website: '',\n            text: '',\n        };\n        this.handleDialogOpen = this.handleDialogOpen.bind(this);\n        this.handleDialogClose = this.handleDialogClose.bind(this);\n    }\n\n    handleDialogOpen(type, chip) {\n        if (type === 'publications') {\n            this.setState({\n                openPublishDialog: true,\n                title: chip.name,\n                company: chip.publisher,\n                date: chip.releaseDate,\n                website: chip.website,\n                text: chip.summary,\n            });\n        } else if (type === 'awards') {\n            this.setState({\n                openAwardDialog: true,\n                title: chip.title,\n                company: chip.awarder,\n                date: chip.date,\n                text: chip.details,\n            });\n        }\n    }\n\n    handleDialogClose() {\n        this.setState({\n            openAwardDialog: false,\n            openPublishDialog: false,\n        });\n    }\n\n    render() {\n        const {\n            title,\n            openPublishDialog,\n            openAwardDialog,\n            company,\n            date,\n            website,\n            text,\n            userAwards,\n            userLanguages,\n            userSkills,\n            userPublication,\n        } = this.state;\n\n        let AwardDisp;\n        let PublicDisp;\n        let SkillDisp;\n\n        if (userAwards.length > 0 && userAwards[0].title !== '') {\n            AwardDisp = (\n                <AwardCard\n                    title=\"awards\"\n                    items={userAwards}\n                    handleDialogOpen={this.handleDialogOpen}\n                />\n            );\n        }\n        if (userPublication.length > 0 && userPublication[0].name !== '') {\n            PublicDisp = (\n                <PublicationCard\n                    title=\"publications\"\n                    items={userPublication}\n                    handleDialogOpen={this.handleDialogOpen}\n                />\n            );\n        }\n        if (userSkills.length > 0 && userSkills[0].name !== '') {\n            SkillDisp = <SkillCard title=\"skills\" items={userSkills} />;\n        }\n\n        return (\n            <div className=\"portfolioPage extrasPage\">\n                <div className=\"portfolioPageTitle floodFill\">Extra&apos;s</div>\n                <div className=\"portfolioFlatContainer\">\n                    {AwardDisp}\n                    {PublicDisp}\n                    {SkillDisp}\n                    <LanguageCard\n                        title=\"languages\"\n                        items={userLanguages}\n                        handleDialogOpen={this.handleDialogOpen}\n                    />\n                </div>\n                <DialogPublication\n                    title={title}\n                    handleDialogClose={this.handleDialogClose}\n                    open={openPublishDialog}\n                    publisher={company}\n                    date={date}\n                    website={website}\n                >\n                    {text}\n                </DialogPublication>\n                <DialogAward\n                    title={title}\n                    handleDialogClose={this.handleDialogClose}\n                    open={openAwardDialog}\n                    awarder={company}\n                    date={date}\n                >\n                    {text}\n                </DialogAward>\n                <div className=\"miniLine\" />\n            </div>\n        );\n    }\n}\n\nExtra.propTypes = {\n    awards: PropTypes.oneOfType([PropTypes.object]).isRequired,\n    publications: PropTypes.oneOfType([PropTypes.object]).isRequired,\n    languages: PropTypes.oneOfType([PropTypes.object]).isRequired,\n    skills: PropTypes.oneOfType([PropTypes.object]).isRequired,\n};\n\nexport default Extra;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Contact = (props) => {\n    const { email, phone, location } = props;\n\n    return (\n        <div className=\"portfolioPage contactPage\">\n            <div className=\"portfolioPageTitle\">Contact Me</div>\n            <div className=\"portfolioContactCard\">\n                <div className=\"miniLine\" />\n                <li>\n                    <span className=\"portfolioContactCardInfo\">\n                        <span className=\"portfolioContactCardInfoTitle\">\n                            Email ID -\n                        </span>{' '}\n                        <span className=\"portfolioContactCardInfoDetails\">\n                            {email}\n                        </span>\n                    </span>\n                </li>\n                <li>\n                    <span className=\"portfolioContactCardInfo\">\n                        <span className=\"portfolioContactCardInfoTitle\">\n                            Contact No -\n                        </span>{' '}\n                        <span className=\"portfolioContactCardInfoDetails\">\n                            {phone}\n                        </span>\n                    </span>\n                </li>\n                <div className=\"miniLine\" />\n            </div>\n            <div className=\"portfolioContactCard\">\n                <div className=\"miniLine\" />\n                <div className=\"portfolioContactCardAddress\">\n                    <span>{location.addressline1}</span>\n                    <br />\n                    <span>{location.addressline2}</span>\n                    <br />\n                    {location.city}\n                    <br />\n                    {location.country} | {location.pincode}\n                </div>\n                <div className=\"miniLine\" />\n            </div>\n        </div>\n    );\n};\n\nContact.propTypes = {\n    email: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n    location: PropTypes.objectOf(PropTypes.object).isRequired,\n};\n\nexport default Contact;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { animateScroll as scroll } from 'react-scroll';\nimport Landing from './portfolio/landing';\nimport About from './portfolio/about';\nimport Education from './portfolio/education';\nimport Work from './portfolio/work';\nimport Volunteer from './portfolio/volunteer';\nimport Extra from './portfolio/extra';\nimport Contact from './portfolio/contact';\n\nimport './portfolio.css';\n\nfunction App(props) {\n    const scrollFunc = () => scroll.scrollTo(window.innerHeight);\n    const { appData } = props;\n    const { profile } = appData;\n    return (\n        <div className=\"portfolioContainerFull2\">\n            <Landing\n                name={profile.user.name}\n                label={profile.about.label}\n                img={profile.about.imgUrl}\n                initScroll={scrollFunc}\n            />\n            <div\n                className=\"portfolioBodyCont\"\n                style={{ top: `${window.innerHeight}px` }}\n            >\n                <About summary={profile.about} top={window.innerHeight} />\n                <Education education={profile.education} />\n                <Work work={profile.work} />\n                <Volunteer volunteer={profile.volunteer} />\n                <Extra\n                    awards={profile.awards}\n                    publications={profile.publications}\n                    languages={profile.languages}\n                    skills={profile.skills}\n                />\n                <Contact\n                    email={profile.user.email}\n                    phone={profile.about.number}\n                    location={profile.location}\n                />\n            </div>\n        </div>\n    );\n}\n\nApp.propTypes = {\n    appData: PropTypes.oneOfType([PropTypes.object]).isRequired,\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfetch('./Data/file.json')\n    .then((r) => r.json())\n    .then((data) => {\n        ReactDOM.render(\n            <App appData={data} />,\n            document.getElementById('root')\n        );\n    });\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}